name: 'OnPrem Terraform Plan'

on:
  push:
    branches:
    - main
    paths:
    - OnPrem/Terraform/**
  pull_request:
    branches:
    - main
    paths:
    - OnPrem/Terraform/**

permissions:
  pull-requests: write
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_PROXMOX_USERNAME: ${{ secrets.TF_VAR_PROXMOX_USERNAME }}
  TF_VAR_PROXMOX_PASSWORD: ${{ secrets.TF_VAR_PROXMOX_PASSWORD }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: self-hosted

    defaults:
      run:
        shell: bash
        working-directory: ./OnPrem/Terraform
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install NodeJS, it is needed for the self-hosted runner
    - name: Install NodeJS
      run: |
        curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh
        sudo -E bash nodesource_setup.sh
        sudo apt-get install -y nodejs
        node -v

    - name: Install Unzip
      run: |
        sudo apt install unzip
        unzip -v

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.11.2"

    - name: Terraform Init
      id: init
      run: terraform init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    # Validate that the configuration files are syntactically valid
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          ### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          ### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          ### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </detail>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false