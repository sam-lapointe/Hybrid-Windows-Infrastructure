---
- name: Create Organizational Units
  microsoft.ad.ou:
    name: "{{ item.ou }}"
    path: "DC={{ domain.split('.')[0] }},DC={{ domain.split('.')[1] }}"
    state: present
  loop: "{{ vars[domain.split('.')[0]] }}"
  loop_control:
    label: "OU={{ item.ou }}"
  register: organizational_units

- name: Create Sub Organizational Units
  microsoft.ad.ou:
    name: "{{ item.1.keys() | first if item.1 is mapping else item.1 }}"
    path: "OU={{ item.0.ou }},DC={{ domain.split('.')[0] }},DC={{ domain.split('.')[1] }}"
    state: present
  loop: "{{ query('subelements', vars[domain.split('.')[0]], 'sub_ou', {'skip_missing': true}) }}"
  loop_control:
    label: "OU={{ item.1.keys() | first if item.1 is mapping else item.1 }},OU={{ item.0.ou }}"
  register: sub_organizational_units

- name: Verify if AD Recycle Bin is enabled
  vars:
    verify_bin: |
      $bin = (Get-ADOptionalFeature -Filter 'Name -like "Recycle Bin Feature"').EnabledScopes | ConvertTo-Json
      if ($null -eq $bin) {return $false} else {return $true}
  ansible.windows.win_shell: "{{ verify_bin }}"
  register: is_adbin_enabled
  changed_when: (is_adbin_enabled.stdout | trim) == "False"

- name: Enable AD Recycle Bin if not enabled
  ansible.windows.win_shell: Enable-AdOptionalFeature 'Recycle Bin Feature' -Scope ForestOrConfigurationSet -Target '{{ domain }}'  -Confirm:$false
  when: is_adbin_enabled.changed

- name: Verify if LAPS schema is present
  vars:
    verify_laps: |
      $laps = Get-ADObject -Filter {name -like "ms-LAPS-*" } -SearchBase (Get-ADRootDSE).schemaNamingContext -Properties name
      if ($null -eq $laps) {return $false} else {return $true}
  ansible.windows.win_shell: "{{ verify_laps }}"
  register: is_laps_schema_present
  changed_when: (is_laps_schema_present.stdout | trim) == "False"

- name: Update Laps AD Schema
  ansible.windows.win_shell: |
    Update-LapsADSchema -Confirm:$false
  when: is_laps_schema_present.changed

- name: Set Computer Self Permission on Servers Organization Units for LAPS
  ansible.windows.win_shell: |
    Set-LapsADComputerSelfPermission -Identity "OU={{ item.ou }},DC={{ domain.split('.')[0] }},DC={{ domain.split('.')[1] }}"
  when: 
    - organizational_units.changed
  loop: "{{ vars[domain.split('.')[0]] | selectattr('ou', 'equalto', 'Servers') }}"
  loop_control:
    label: "OU={{ item.ou }}"

- name: Set Computer Self Permission on Sub Organizational Units for Laps
  ansible.windows.win_shell: |
    Set-LapsADComputerSelfPermission -Identity "OU={{ item.1.keys() | first if item.1 is mapping else item.1 }},OU={{ item.0.ou }},DC={{ domain.split('.')[0] }},DC={{ domain.split('.')[1] }}"
  when: sub_organizational_units.changed
  loop: "{{ query('subelements', vars[domain.split('.')[0]], 'sub_ou', {'skip_missing': true}) | selectattr('1', 'equalto', 'Computers') | list }}"
  loop_control:
    label: "OU={{ item.1.keys() | first if item.1 is mapping else item.1 }},OU={{ item.0.ou }}"

- name: Create the GPO for LAPS
  vars:
    create_gpo: |
      $gpo_name = "LAPS"
      $ou = "DC={{ domain.split('.')[0] }},DC={{ domain.split('.')[1] }}"
      if (-not (Get-GPO -Name $gpo_name -ErrorAction SilentlyContinue)) {
          New-GPO -Name $gpo_name | Out-Null
          New-GPLink -Name $gpo_name -Target $ou -LinkEnabled Yes | Out-Null
          return $true
      } else {
          $ou_link = (Get-GPInheritance -Target $ou).GpoLinks | Where-Object {$_.DisplayName -eq $gpo_name}
          if ($ou_link.Count -eq 1 -and $ou_link.Enabled -eq $true) {
              return $false
          } elseif ($ou_link.Count -eq 0) {
              New-GPLink -Name $gpo_name -Target $ou -LinkEnabled Yes | Out-Null
              return $true
          } elseif ($ou_link.Enabled -eq $false) {
              Set-GPLink -Name $gpo_name -Target $ou -LinkEnabled Yes | Out-Null
              return $true
          }
      }
  ansible.windows.win_shell: "{{ create_gpo }}"
  register: is_gpo_changed
  changed_when: (is_gpo_changed.stdout | trim) == "True"

- name: Configure the Group Policies for LAPS
  vars:
    configure_gpo: |
      $gpo_name = "LAPS"

      # Define required registry settings in the GPO
      $LAPSRegistryPath = "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\LAPS"
      $RequiredKeys = @{
          "ADPasswordEncryptionEnabled" = 1
          "BackupDirectory" = 2
          "PostAuthenticationResetDelay" = 8
          "PostAuthenticationActions" = 3
      }

      # Get existing registry settings in the GPO
      $ExistingKeys = Get-GPRegistryValue -Name $gpo_name -Key $LAPSRegistryPath -ErrorAction SilentlyContinue

      $changed = $false

      # Remove any extra keys not in the required list
      if ($ExistingKeys) {
          foreach ($Key in $ExistingKeys.ValueName) {
              if (-not $RequiredKeys.ContainsKey($Key)) {
                  Remove-GPRegistryValue -Name $gpo_name -Key $LAPSRegistryPath -ValueName $Key | Out-Null
                  $changed = $true
              }
          }
      }

      # Ensure required keys exist with correct values
      foreach ($Key in $RequiredKeys.Keys) {
          $CurrentValue = (Get-GPRegistryValue -Name $gpo_name -Key $LAPSRegistryPath -ValueName $Key -ErrorAction SilentlyContinue).Value
          if ($CurrentValue -ne $RequiredKeys[$Key]) {
              Set-GPRegistryValue -Name $gpo_name -Key $LAPSRegistryPath -ValueName $Key -Type DWord -Value $RequiredKeys[$Key] | Out-Null
              $changed = $true
          }
      }
      return $changed
  ansible.windows.win_shell: "{{ configure_gpo }}"
  register: is_config_changed
  changed_when: (is_config_changed.stdout | trim) == "True"
...